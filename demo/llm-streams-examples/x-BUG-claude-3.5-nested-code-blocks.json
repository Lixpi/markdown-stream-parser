[
    "I",
    "'ll help you create palindrome checker",
    " programs in 5 different languages. Each solution",
    " will include nested code blocks to demonstrate different approaches.",
    "\n\n##### Python Solution\n\n```python\ndef is_palindrome(",
    "text):\n    \"\"\"\n    Example usage",
    ":\n    ```python\n    result = is_palindrome",
    "(\"radar\")  # True\n    result",
    " = is_palindrome(\"hello\")  #",
    " False\n    ```\n    \"\"\"\n    cleane",
    "d_text = ''.join(char.lower",
    "() for char in text if char.isal",
    "num())\n    return cleaned_text == cleane",
    "d_text[::-1]\n```\n",
    "\n\n##### JavaScript Solution\n\n```javascript\nconst isPalindrome =",
    " (text) => {\n    /*",
    "\n    Example usage:\n    ```javascript",
    "\n    const result1 = isPalin",
    "drome(\"radar\");  // true\n    const",
    " result2 = isPalindrome(\"hello",
    "\");  // false\n    ```\n    */",
    "\n    const cleanedText = text.",
    "toLowerCase().replace(/[^a-z0-",
    "9]/g, '');\n    return cleanedText",
    " === [...cleanedText].reverse().join('');",
    "\n};\n```\n\n\n##### Java Solution\n\n```",
    "java\npublic class Palindr",
    "omeChecker {\n    public static boolean isP",
    "alindrome(String text) {\n        ",
    "/*\n        Example usage:\n        ```java",
    "\n        boolean result1 = isPalin",
    "drome(\"radar\");  // true\n        boolean",
    " result2 = isPalindrome(\"hello",
    "\");  // false\n        ```\n        */",
    "\n        String cleanedText = text.toLowerCase",
    "().replaceAll(\"[^a-z",
    "0-9]\", \"\");\n        return",
    " cleanedText.equals(new StringBuilder(clean",
    "edText).reverse().toString());\n    }",
    "\n}\n```\n\n\n##### Ruby Solution\n\n```",
    "ruby\ndef is_palindrome?(",
    "text)\n    # Example usage:\n    ",
    "# ```ruby\n    # result1 =",
    " is_palindrome?(\"radar\")  #",
    " true\n    # result2 = is_",
    "palindrome?(\"hello\")  # false",
    "\n    # ```\n    cleaned_text = text",
    ".downcase.gsub(/[^a",
    "-z0-9]/, '')\n    ",
    "cleaned_text == cleaned_text.reverse",
    "\nend\n```\n\n\n##### Go Solution\n\n```go",
    "\nfunc IsPalindrome(text string) bool {",
    "\n    /*\n    Example usage:\n    ",
    "```go\n    result1 := IsP",
    "alindrome(\"radar\")  // true",
    "\n    result2 := IsPalindrome",
    "(\"hello\")  // false\n    ```",
    "\n    */\n    cleanedText := strings.",
    "ToLower(regexp.MustCompile",
    "(`[^a-z0-9]",
    "`).ReplaceAllString(text,",
    " \"\"))\n    for i :=",
    " 0; i < len(cleanedText",
    ")/2; i++",
    " {\n        if cleanedText[i]",
    " != cleanedText[len(cleanedText",
    ")-1-i] {\n            return false",
    "\n        }\n    ",
    "}\n    return true\n}\n```",
    "\n\nEach solution includes:\n- Main",
    " function implementation\n- Nested example",
    " usage in comments\n- Text",
    " cleaning (converting to lowercase and removing non-alphan",
    "umeric characters)\n- Palin",
    "drome checking logic\n\nThe solutions are",
    " efficient and handle various edge cases",
    " like mixed case, spaces, an",
    "d special characters."
]